package client.core;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.apache.curator.framework.CuratorFramework;
import org.apache.curator.framework.api.CuratorWatcher;

import com.alibaba.fastjson.JSONObject;

import client.constant.Constant;
import client.handler.SimpleClientHandler;
import client.param.ClientRequest;
import client.param.Response;
import client.zk.ZookeeperFactory;
import io.netty.bootstrap.Bootstrap;
import io.netty.channel.Channel;
import io.netty.channel.ChannelFuture;
import io.netty.channel.ChannelInitializer;
import io.netty.channel.EventLoopGroup;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.channel.socket.nio.NioSocketChannel;
import io.netty.handler.codec.DelimiterBasedFrameDecoder;
import io.netty.handler.codec.Delimiters;
import io.netty.handler.codec.string.StringDecoder;
import io.netty.handler.codec.string.StringEncoder;


public class TcpClient {
	static final Bootstrap boot = new Bootstrap();
	private static ChannelFuture f = null;
	static {
		String host = "localhost";
		int port = 8080;
		EventLoopGroup work = new NioEventLoopGroup();
		boot.group(work).channel(NioSocketChannel.class).handler(new ChannelInitializer<Channel>() {
			@Override
			protected void initChannel(Channel ch) throws Exception {
				ch.pipeline().addLast(new DelimiterBasedFrameDecoder(Integer.MAX_VALUE, Delimiters.lineDelimiter()[0]));
				ch.pipeline().addLast(new StringDecoder());// 字符串解码器
				ch.pipeline().addLast(new StringEncoder());// 字符串编码器
				ch.pipeline().addLast(new SimpleClientHandler());// 业务逻辑处理处
			}
		});
		CuratorFramework client = ZookeeperFactory.create();
		
		List<String> serverPath = client.getChildren().forPath(Constant.SERVER_PATH);
		//客户端加上ZK监听服务器的变化
		CuratorWatcher watcher = new ServerWatcher();
		client.getChildren().usingWatcher(watcher ).forPath(Constant.SERVER_PATH);
		
		for(String path :serverPath){
			String[] str = path.split("#");
			ChannelManager.realServerPath.add(str[0]+"#"+str[1]);
			ChannelFuture channnelFuture = TcpClient.boot.connect(str[0], Integer.valueOf(str[1]));
			ChannelManager.addChnannel(channnelFuture);
		}
		if(ChannelManager.realServerPath.size()>0){
			String[] netMessageArray = ChannelManager.realServerPath.toArray()[0].toString().split("#");
			host = netMessageArray[0];
			port = Integer.valueOf(netMessageArray[1]);
		}
	
		} catch (InterruptedException e) {
			e.printStackTrace();
		}

	}

	// 每一个请求都是同一个连接
	public static Response send(ClientRequest request) {
		f.channel().writeAndFlush(JSONObject.toJSONString(request));
		f.channel().writeAndFlush("\r\n");
		DefaultFuture df = new DefaultFuture(request);
		return df.get();

	}

	public static void main(String[] args) {
//		long start = System.currentTimeMillis();
//		
//		long end = System.currentTimeMillis();
//		long count = end =start;
//		System.out.println("总计花费:"+count);

	}

}
